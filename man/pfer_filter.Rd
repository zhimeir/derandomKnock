% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pfer_filter.R
\name{pfer_filter}
\alias{pfer_filter}
\title{A filter for PFER control}
\usage{
pfer_filter(
  X,
  y,
  v0 = 1,
  M = 50,
  tau = 0.5,
  knockoff_method = "gaussian",
  knockoff_stat = stat.glmnet_coefdiff,
  seed = 24601,
  mu = NULL,
  Sigma = NULL,
  pInit = NULL,
  Q = NULL,
  pEmit = NULL
)
}
\arguments{
\item{X}{a n-by-p matrix of the covariates.}

\item{y}{the response vector of length in (can be continuous or binary).}

\item{v0}{a positive numver indicating the PFER target (default: 1). Can be left NULL if using the kfwer error.}

\item{M}{an integer specifying the number of knockoff copies computed (default: 30).}

\item{tau}{a number betweem 0 and 1 indicating the selection frequency (default: 0.5).}

\item{knockoff_method}{either "gaussian" or "hmm" (default: "gaussian").}

\item{knockoff_stat}{a function in the \code{\link{stat.glmnet_coefdiff}} family in the \code{\link{knockoff}} pacakge.}

\item{seed}{an integer specifying the random seed used in the procedure.}

\item{mu}{a length-p mean vector of X if it follows a Gaussian distribution.}

\item{Sigma}{a p-by-p covariance matrix of X if it follows a Gaussian distribution.}

\item{pInit}{n array of length K, containing the marginal distribution of the states for the first variable, if X is sampled from an HMM.}

\item{Q}{an array of size (p-1,K,K), containing a list of p-1 transition matrices between the K states of the Markov chain, if X is sampled from an HMM.}

\item{pEmit}{an array of size (p,M,K), containing the emission probabilities for each of the M possible emission states, from each of the K hidden states and the p variables, if X is sampled from an HMM.}
}
\value{
S the selection set.

pi the selection frequency of all selected variables.

tau the selection threshold

W a M-by-p matrix of the computed knockoff feature importance statistics.
}
\description{
The function to implement the derandomized knockoffs procedure with PFER control.
}
\examples{
#Generate data
n <- 100; p <- 50; s <- 10;
rho <- 0.5;
Sigma <- toeplitz(rho^(1:p-1))
X <- matrix(rnorm(n*p),n,p)\%*\%chol(Sigma)
beta <- rep(0,p)
beta[1:s] <- 3.5/sqrt(n)
y <- X\%*\%beta+rnorm(n)

# Control PFER at level v=1
res <- pfer_filter(X,y,v0=1, knockoff_method = "gaussian",
                 knockoff_stat = stat.glmnet_coefdiff,
                 mu = rep(0,p),Sigma = Sigma)


}
