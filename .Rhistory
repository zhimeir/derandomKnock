library(devtools)
library(knockoff)
install_github("zhimeir/derandomKnock", auth_token = "6e9e05ff352b37c69cdcbebcab3fd7711b1e05aa")
library(derandomKnock)
#Generate data
n <- 100; p <- 50; s <- 10;
rho <- 0.5;
Sigma <- toeplitz(rho^(1:p-1))
X <- matrix(rnorm(n*p),n,p)%*%chol(Sigma)
beta <- rep(0,p)
beta[1:s] <- 3.5/sqrt(n)
y <- X%*%beta+rnorm(n)
# Control PFER at level v=1
S <- derandomKnock(X,y,type = "pfer",v=1, knockoff_method = "gaussian",
mu = rep(0,p),Sigma = Sigma)
S
# Control 1-FWER at level alpha=0.1
S <- derandomKnock(X,y,type = "kfwer", k=1, alpha = 0.1, knockoff_method = "gaussian",
mu = rep(0,p),Sigma = Sigma)
S
library(devtools)
library(knockoff)
install_github("zhimeir/derandomKnock", auth_token = "6e9e05ff352b37c69cdcbebcab3fd7711b1e05aa")
library(devtools)
library(knockoff)
install_github("zhimeir/derandomKnock", auth_token = "6e9e05ff352b37c69cdcbebcab3fd7711b1e05aa")
library(devtools)
library(knockoff)
install_github("zhimeir/derandomKnock", auth_token = "6e9e05ff352b37c69cdcbebcab3fd7711b1e05aa")
library(devtools)
library(knockoff)
install_github("zhimeir/derandomKnock", auth_token = "6e9e05ff352b37c69cdcbebcab3fd7711b1e05aa")
library(derandomKnock)
library(devtools)
library(knockoff)
install_github("zhimeir/derandomKnock", auth_token = "6e9e05ff352b37c69cdcbebcab3fd7711b1e05aa")
library(derandomKnock)
library(devtools)
library(knockoff)
install_github("zhimeir/derandomKnock", auth_token = "6e9e05ff352b37c69cdcbebcab3fd7711b1e05aa")
library(derandomKnock)
library(devtools)
library(knockoff)
install_github("zhimeir/derandomKnock", auth_token = "6e9e05ff352b37c69cdcbebcab3fd7711b1e05aa")
library(derandomKnock)
install_github("zhimeir/derandomKnock", auth_token = "6e9e05ff352b37c69cdcbebcab3fd7711b1e05aa")
library(derandomKnock)
library(devtools)
library(knockoff)
install_github("zhimeir/derandomKnock", auth_token = "6e9e05ff352b37c69cdcbebcab3fd7711b1e05aa")
library(derandomKnock)
#Generate data
n <- 100; p <- 50; s <- 10;
rho <- 0.5;
Sigma <- toeplitz(rho^(1:p-1))
X <- matrix(rnorm(n*p),n,p)%*%chol(Sigma)
beta <- rep(0,p)
beta[1:s] <- 3.5/sqrt(n)
y <- X%*%beta+rnorm(n)
# Control 1-FWER at level alpha=0.1
res <- derandomKnock(X,y,type = "kfwer", k=1, alpha = 0.1, knockoff_method = "gaussian",
mu = rep(0,p),Sigma = Sigma)
res
install_github("zhimeir/derandomKnock", auth_token = "6e9e05ff352b37c69cdcbebcab3fd7711b1e05aa")
library(derandomKnock)
library(devtools)
library(knockoff)
library(derandomKnock)
library(devtools)
library(knockoff)
library(derandomKnock)
#Generate data
n <- 100; p <- 50; s <- 10;
rho <- 0.5;
Sigma <- toeplitz(rho^(1:p-1))
X <- matrix(rnorm(n*p),n,p)%*%chol(Sigma)
beta <- rep(0,p)
beta[1:s] <- 3.5/sqrt(n)
y <- X%*%beta+rnorm(n)
# Control PFER at level v=1
res <- derandomKnock(X,y,type = "pfer",v=1, knockoff_method = "gaussian",
mu = rep(0,p),Sigma = Sigma)
# Control 1-FWER at level alpha=0.1
res <- derandomKnock(X,y,type = "kfwer", k=1, alpha = 0.1, knockoff_method = "gaussian",
mu = rep(0,p),Sigma = Sigma)
beta[1:s] <- 4/sqrt(n)
y <- X%*%beta+rnorm(n)
# Control 1-FWER at level alpha=0.1
res <- derandomKnock(X,y,type = "kfwer", k=1, alpha = 0.1, knockoff_method = "gaussian",
mu = rep(0,p),Sigma = Sigma)
View(res)
View(res)
res
# Control 1-FWER at level alpha=0.1
res <- derandomKnock(X,y,type = "kfwer", k=3, alpha = 0.1, knockoff_method = "gaussian",
mu = rep(0,p),Sigma = Sigma)
res
#Generate data
n <- 100; p <- 50; s <- 10;
rho <- 0.5;
Sigma <- toeplitz(rho^(1:p-1))
X <- matrix(rnorm(n*p),n,p)%*%chol(Sigma)
beta <- rep(0,p)
beta[1:s] <- 4.5/sqrt(n)
y <- X%*%beta+rnorm(n)
# Control 1-FWER at level alpha=0.1
res <- derandomKnock(X,y,type = "kfwer", k=3, alpha = 0.1, knockoff_method = "gaussian",
mu = rep(0,p),Sigma = Sigma)
# Control 1-FWER at level alpha=0.1
res <- derandomKnock(X,y,type = "kfwer", k=1, alpha = 0.1, knockoff_method = "gaussian",
mu = rep(0,p),Sigma = Sigma)
View(res)
beta[1:s] <- 5/sqrt(n)
y <- X%*%beta+rnorm(n)
# Control 1-FWER at level alpha=0.1
res <- derandomKnock(X,y,type = "kfwer", k=1, alpha = 0.1, knockoff_method = "gaussian",
mu = rep(0,p),Sigma = Sigma)
res
# Control 1-FWER at level alpha=0.1
res <- derandomKnock(X,y,type = "kfwer", k=1, alpha = 0.1, knockoff_method = "gaussian",
mu = rep(0,p),Sigma = Sigma,M=50)
res
beta[1:s] <- 10/sqrt(n)
y <- X%*%beta+rnorm(n)
# Control 1-FWER at level alpha=0.1
res <- derandomKnock(X,y,type = "kfwer", k=1, alpha = 0.1, knockoff_method = "gaussian",
mu = rep(0,p),Sigma = Sigma)
res
library(devtools)
library(knockoff)
install_github("zhimeir/derandomKnock", auth_token = "6e9e05ff352b37c69cdcbebcab3fd7711b1e05aa")
library(derandomKnock)
#Generate data
n <- 100; p <- 50; s <- 10;
rho <- 0.5;
Sigma <- toeplitz(rho^(1:p-1))
X <- matrix(rnorm(n*p),n,p)%*%chol(Sigma)
beta <- rep(0,p)
beta[1:s] <- 10/sqrt(n)
y <- X%*%beta+rnorm(n)
# Control PFER at level v=1
res <- derandomKnock(X,y,type = "pfer",v=1, knockoff_method = "gaussian",
mu = rep(0,p),Sigma = Sigma)
library(derandomKnock)
#Generate data
n <- 100; p <- 50; s <- 10;
rho <- 0.5;
Sigma <- toeplitz(rho^(1:p-1))
X <- matrix(rnorm(n*p),n,p)%*%chol(Sigma)
beta <- rep(0,p)
beta[1:s] <- 10/sqrt(n)
y <- X%*%beta+rnorm(n)
# Control PFER at level v=1
res <- derandomKnock(X,y,type = "pfer",v=1, knockoff_method = "gaussian",
mu = rep(0,p),Sigma = Sigma)
# Control PFER at level v=1
res <- derandomKnock(X = X,y=y,type = "pfer",v=1, knockoff_method = "gaussian",
mu = rep(0,p),Sigma = Sigma)
rho <- 0;
Sigma <- toeplitz(rho^(1:p-1))
X <- matrix(rnorm(n*p),n,p)%*%chol(Sigma)
beta <- rep(0,p)
beta[1:s] <- 10/sqrt(n)
y <- X%*%beta+rnorm(n)
# Control 1-FWER at level alpha=0.1
res <- derandomKnock(X,y,type = "kfwer", k=1, alpha = 0.1, knockoff_method = "gaussian",
mu = rep(0,p),Sigma = Sigma)
View(Sigma)
beta[1:s] <- 20/sqrt(n)
y <- X%*%beta+rnorm(n)
# Control 1-FWER at level alpha=0.1
res <- derandomKnock(X,y,type = "kfwer", k=1, alpha = 0.1, knockoff_method = "gaussian",
mu = rep(0,p),Sigma = Sigma)
View(res)
library(devtools)
library(knockoff)
install_github("zhimeir/derandomKnock", auth_token = "6e9e05ff352b37c69cdcbebcab3fd7711b1e05aa")
library(derandomKnock)
#Generate data
n <- 100; p <- 50; s <- 10;
rho <- 0;
Sigma <- toeplitz(rho^(1:p-1))
X <- matrix(rnorm(n*p),n,p)%*%chol(Sigma)
beta <- rep(0,p)
beta[1:s] <- 20/sqrt(n)
y <- X%*%beta+rnorm(n)
# Control 1-FWER at level alpha=0.1
res <- derandomKnock(X,y,type = "kfwer", k=1, alpha = 0.1, knockoff_method = "gaussian",
mu = rep(0,p),Sigma = Sigma)
View(res)
library(devtools)
library(knockoff)
library(derandomKnock)
#Generate data
n <- 100; p <- 50; s <- 10;
rho <- 0;
Sigma <- toeplitz(rho^(1:p-1))
X <- matrix(rnorm(n*p),n,p)%*%chol(Sigma)
beta <- rep(0,p)
beta[1:s] <- 20/sqrt(n)
y <- X%*%beta+rnorm(n)
# Control PFER at level v=1
res <- derandomKnock(X = X,y=y,type = "pfer",v=1, knockoff_method = "gaussian",
mu = rep(0,p),Sigma = Sigma)
res
# Control 1-FWER at level alpha=0.1
res <- derandomKnock(X,y,type = "kfwer", k=1, alpha = 0.1, knockoff_method = "gaussian",
mu = rep(0,p),Sigma = Sigma)
res
res <- fwer_filter(X,y, k=1, alpha = 0.1, knockoff_method = "gaussian",
mu = rep(0,p),Sigma = Sigma)
res
res <- fwer_filter(X,y, k=1, alpha = 0.1, knockoff_method = "gaussian",
mu = rep(0,p),Sigma = Sigma,M=50)
res
res <- fwer_filter(X,y, k=1, alpha = 0.1, knockoff_method = "gaussian",
mu = rep(0,p),Sigma = Sigma,M=100)
res
res <- fwer_filter(X,y, k=3, alpha = 0.1, knockoff_method = "gaussian",
mu = rep(0,p),Sigma = Sigma)
res
res <- fwer_filter(X,y, k=1, alpha = 0.1, knockoff_method = "gaussian",seed = 1
mu = rep(0,p),Sigma = Sigma)
res <- fwer_filter(X,y, k=1, alpha = 0.1, knockoff_method = "gaussian",seed = 1,
mu = rep(0,p),Sigma = Sigma)
res
res <- fwer_filter(X,y, k=1, alpha = 0.1, knockoff_method = "gaussian",seed = 2020,
mu = rep(0,p),Sigma = Sigma)
res
library(devtools)
library(knockoff)
install_github("zhimeir/derandomKnock", auth_token = "6e9e05ff352b37c69cdcbebcab3fd7711b1e05aa")
library(derandomKnock)
setwd("~/Documents/GitHub/derandomKnock/")
# Run once to configure package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
use_mit_license()
